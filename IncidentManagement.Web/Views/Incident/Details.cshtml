@model IncidentManagement.Entities.Models.Incident

@{
    ViewBag.Title = "Detalles de la Incidencia";
}

<div class="container-fluid">
    <h2>@ViewBag.Title</h2>

    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@Model.Title</h5>
                    <p class="card-text">@Model.Description</p>
                    
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <p><strong>Estado:</strong> <span class="badge @GetStatusBadgeClass(Model.Status)">@Model.Status</span></p>
                            <p><strong>Prioridad:</strong> <span class="badge @GetPriorityBadgeClass(Model.Priority)">@Model.Priority</span></p>
                            <p><strong>Fecha de Creación:</strong> @Model.CreatedDate.ToString("dd/MM/yyyy HH:mm")</p>
                            <p><strong>Última Actualización:</strong> @Model.LastUpdatedDate.ToString("dd/MM/yyyy HH:mm")</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Usuario que Reporta:</strong> @Model.Reporter.Name</p>
                            <p><strong>Técnico Asignado:</strong> @(Model.AssignedTechnician?.Name ?? "Sin asignar")</p>
                        </div>
                    </div>

                    <div class="mt-4">
                        <h6>Acciones</h6>
                        <div class="btn-group">
                            <button class="btn btn-warning btn-sm" onclick="updateStatus(@Model.Id)">
                                <i class="fas fa-sync"></i> Cambiar Estado
                            </button>
                            <button class="btn btn-info btn-sm" onclick="assignTechnician(@Model.Id)">
                                <i class="fas fa-user-plus"></i> Asignar Técnico
                            </button>
                            <a href="@Url.Action("Edit", new { id = Model.Id })" class="btn btn-primary btn-sm">
                                <i class="fas fa-edit"></i> Editar
                            </a>
                            <a href="@Url.Action("Index")" class="btn btn-secondary btn-sm">
                                <i class="fas fa-arrow-left"></i> Volver
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Comentarios</h5>
                </div>
                <div class="card-body">
                    <div id="commentsList">
                        @foreach (var comment in Model.Comments)
                        {
                            <div class="comment mb-3">
                                <div class="d-flex justify-content-between">
                                    <strong>@comment.User.Name</strong>
                                    <small class="text-muted">@comment.CreatedDate.ToString("dd/MM/yyyy HH:mm")</small>
                                </div>
                                <p class="mb-0">@comment.Content</p>
                            </div>
                        }
                    </div>

                    <div class="mt-3">
                        <textarea id="newComment" class="form-control" rows="3" placeholder="Escriba un comentario..."></textarea>
                        <button class="btn btn-primary btn-sm mt-2" onclick="addComment(@Model.Id)">
                            <i class="fas fa-paper-plane"></i> Enviar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function updateStatus(incidentId) {
            var newStatus = prompt("Seleccione el nuevo estado (Open, InProgress, Resolved, Closed):");
            if (newStatus) {
                $.post('@Url.Action("UpdateStatus")', { incidentId: incidentId, status: newStatus }, function (response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert('Error al actualizar el estado: ' + response.message);
                    }
                });
            }
        }

        function assignTechnician(incidentId) {
            var technicianId = prompt("Ingrese el ID del técnico a asignar:");
            if (technicianId) {
                $.post('@Url.Action("AssignTechnician")', { incidentId: incidentId, technicianId: technicianId }, function (response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert('Error al asignar el técnico: ' + response.message);
                    }
                });
            }
        }

        function addComment(incidentId) {
            var content = $('#newComment').val();
            if (content) {
                $.post('@Url.Action("AddComment")', {
                    incidentId: incidentId,
                    userId: 1, // TODO: Obtener el ID del usuario actual
                    content: content
                }, function (response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert('Error al agregar el comentario: ' + response.message);
                    }
                });
            }
        }
    </script>
}

@functions {
    private string GetStatusBadgeClass(IncidentManagement.Entities.Models.IncidentStatus status)
    {
        switch (status)
        {
            case IncidentManagement.Entities.Models.IncidentStatus.Open:
                return "badge-primary";
            case IncidentManagement.Entities.Models.IncidentStatus.InProgress:
                return "badge-warning";
            case IncidentManagement.Entities.Models.IncidentStatus.Resolved:
                return "badge-success";
            case IncidentManagement.Entities.Models.IncidentStatus.Closed:
                return "badge-secondary";
            default:
                return "badge-default";
        }
    }

    private string GetPriorityBadgeClass(IncidentManagement.Entities.Models.Priority priority)
    {
        switch (priority)
        {
            case IncidentManagement.Entities.Models.Priority.Low:
                return "badge-info";
            case IncidentManagement.Entities.Models.Priority.Medium:
                return "badge-warning";
            case IncidentManagement.Entities.Models.Priority.High:
                return "badge-danger";
            case IncidentManagement.Entities.Models.Priority.Critical:
                return "badge-dark";
            default:
                return "badge-default";
        }
    }
} 